{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"Mkdocs-Apidoc \u00b6 Version: 0.2.3 \u00b6 Installation \u00b6 pip install mkdocs-apidoc Usage \u00b6 mkdocs-apidoc exposes a set of jinja2 templates for use in your mkdocs project. The most basic usage is to include a markdown file for each module you want to document In docs/my_module.md # Some markdown text can do here {{ auto_module(\"my-package.my-module\") }} ## and more markdown can follow, but neither are needed And in your mkdocs.yaml site_name : MkLorum nav : - Home : index.md - Auto : my_module.md plugins : - mkdocs_apidoc And that's it! The module docstring and docstrings for classes, methods and functions are automatically rendered in your site documentation. We've provided some default formatting for how the various components get rendered to markdown, but these can be customized using a jinja2 template in the config. auto_object \u00b6 {{ auto_object(\"package.module.object\") }} Automatically render a class or function object using the normal logic. auto_module \u00b6 {{ auto_module(\"package.module\") }} Insert the parsed documentation for a module, including it's name, docstring, functions and classes. markdown \u00b6 {{ markdown(\"package.module.object\") }} This will call the object's __repr_markdown__ and embed the result. Can be used to do anything you want to, really.","title":"Home"},{"location":"#mkdocs-apidoc","text":"","title":"Mkdocs-Apidoc"},{"location":"#version-023","text":"","title":"Version: 0.2.3"},{"location":"#installation","text":"pip install mkdocs-apidoc","title":"Installation"},{"location":"#usage","text":"mkdocs-apidoc exposes a set of jinja2 templates for use in your mkdocs project. The most basic usage is to include a markdown file for each module you want to document In docs/my_module.md # Some markdown text can do here {{ auto_module(\"my-package.my-module\") }} ## and more markdown can follow, but neither are needed And in your mkdocs.yaml site_name : MkLorum nav : - Home : index.md - Auto : my_module.md plugins : - mkdocs_apidoc And that's it! The module docstring and docstrings for classes, methods and functions are automatically rendered in your site documentation. We've provided some default formatting for how the various components get rendered to markdown, but these can be customized using a jinja2 template in the config.","title":"Usage"},{"location":"#auto_object","text":"{{ auto_object(\"package.module.object\") }} Automatically render a class or function object using the normal logic.","title":"auto_object"},{"location":"#auto_module","text":"{{ auto_module(\"package.module\") }} Insert the parsed documentation for a module, including it's name, docstring, functions and classes.","title":"auto_module"},{"location":"#markdown","text":"{{ markdown(\"package.module.object\") }} This will call the object's __repr_markdown__ and embed the result. Can be used to do anything you want to, really.","title":"markdown"},{"location":"config/","text":"Templates can be customized my modifying the config site_name : MkLorum nav : - Home : index.md - Auto : my_module.md plugins : - mkdocs_apidoc : function_template : | ### {{ name }} {{ signature }} {{ docstring }} All functions will then be rendered via this jinja2 template instead of the provided default. The available arguments can be seen in models Default configuration \u00b6 Options \u00b6 Name type function_template str method_template str signature_template str module_template str class_template str log_level str execute_and_insert_examples bool function_template \u00b6 ### {{ name }} ```python def {{name}}{{ signature }}: ``` {{ docstring }} signature_template \u00b6 ({{params|join(', ')}}){% if returnval %} -> {{ returnval }}{% endif %} method_template \u00b6 #### {{ name }} ```python {% if type == \"STATIC\" %}@staticmethod{% endif %}{% if type == \"CLASS\" %}@classmethod{% endif %}{% if type == \"PROPERTY\" %}@property{% endif %}{% if type == \"ABSTRACTPROPERTY\" %}@staticmethod @property{% endif %} def {{name}}{{ signature }}: ``` {{ docstring }} class_template \u00b6 ### {{ name }} {{ docstring }} {% if class_fields %} #### Fields | Name | Type | |------|------| {% for field in class_fields %}| {{ field.name }} | {{ field.type }} | {% endfor %} {% endif %} {% for m in methods %} {{ m }} {% endfor %} module_template \u00b6 # {{ name }} {{ docstring }} {% if enums %} ## Enums ------------ {% for enum in enums %} {{ enum }} --------------------------- {% endfor %} {% endif %} {% if classes %} ## Classes ----------- {% for c in classes %} {{ c }} --------------------------- {% endfor %} {% endif %} {% if functions %} ## Functions ------------- {% for f in functions %} {{ f }} --------------------------- {% endfor %} {% endif %}","title":"config"},{"location":"config/#default-configuration","text":"","title":"Default configuration"},{"location":"config/#options","text":"Name type function_template str method_template str signature_template str module_template str class_template str log_level str execute_and_insert_examples bool","title":"Options"},{"location":"config/#function_template","text":"### {{ name }} ```python def {{name}}{{ signature }}: ``` {{ docstring }}","title":"function_template"},{"location":"config/#signature_template","text":"({{params|join(', ')}}){% if returnval %} -> {{ returnval }}{% endif %}","title":"signature_template"},{"location":"config/#method_template","text":"#### {{ name }} ```python {% if type == \"STATIC\" %}@staticmethod{% endif %}{% if type == \"CLASS\" %}@classmethod{% endif %}{% if type == \"PROPERTY\" %}@property{% endif %}{% if type == \"ABSTRACTPROPERTY\" %}@staticmethod @property{% endif %} def {{name}}{{ signature }}: ``` {{ docstring }}","title":"method_template"},{"location":"config/#class_template","text":"### {{ name }} {{ docstring }} {% if class_fields %} #### Fields | Name | Type | |------|------| {% for field in class_fields %}| {{ field.name }} | {{ field.type }} | {% endfor %} {% endif %} {% for m in methods %} {{ m }} {% endfor %}","title":"class_template"},{"location":"config/#module_template","text":"# {{ name }} {{ docstring }} {% if enums %} ## Enums ------------ {% for enum in enums %} {{ enum }} --------------------------- {% endfor %} {% endif %} {% if classes %} ## Classes ----------- {% for c in classes %} {{ c }} --------------------------- {% endfor %} {% endif %} {% if functions %} ## Functions ------------- {% for f in functions %} {{ f }} --------------------------- {% endfor %} {% endif %}","title":"module_template"},{"location":"models/","text":"models \u00b6 Enums \u00b6 MethodType \u00b6 Describes the nature of the method. MethodType NORMAL STATIC CLASS PROPERTY DUNDER ABSTRACTPROPERTY ClassType \u00b6 Enum for what kind of class it is. ClassType NORMAL DATACLASS Classes \u00b6 Signature \u00b6 Signature information Fields \u00b6 Name Type name str params typing.List[str] returnval str from_callable \u00b6 @staticmethod def from_callable ( f : Callable , fname : str = None ) -> Signature : Function \u00b6 Holds information for functions, but not methods. Fields \u00b6 Name Type name str signature Signature docstring str from_callable \u00b6 @staticmethod def from_callable ( func ) -> Function : Method \u00b6 Contains information about a method, including it's signature and properties. Fields \u00b6 Name Type name str type MethodType signature Signature docstring str from_callable \u00b6 @staticmethod def from_callable ( func , method_type : mkdocs_apidoc . models . MethodType , fname : Union [ str , NoneType ] = None ) -> Method : Class \u00b6 Contains class information Fields \u00b6 Name Type name str docstring str type ClassType fields typing.List[mkdocs_apidoc.models.Field] methods typing.List[mkdocs_apidoc.models.Method] from_class \u00b6 @staticmethod def from_class ( cls ): Module \u00b6 Holds module contents Fields \u00b6 Name Type name str docstring str functions typing.List[mkdocs_apidoc.models.Function] classes typing.List[mkdocs_apidoc.models.Class] enums typing.List[mkdocs_apidoc.models.Enumeration] from_module \u00b6 @staticmethod def from_module ( m ) -> Module :","title":"models"},{"location":"models/#models","text":"","title":"models"},{"location":"models/#enums","text":"","title":"Enums"},{"location":"models/#methodtype","text":"Describes the nature of the method. MethodType NORMAL STATIC CLASS PROPERTY DUNDER ABSTRACTPROPERTY","title":"MethodType"},{"location":"models/#classtype","text":"Enum for what kind of class it is. ClassType NORMAL DATACLASS","title":"ClassType"},{"location":"models/#classes","text":"","title":"Classes"},{"location":"models/#signature","text":"Signature information","title":"Signature"},{"location":"models/#fields","text":"Name Type name str params typing.List[str] returnval str","title":"Fields"},{"location":"models/#from_callable","text":"@staticmethod def from_callable ( f : Callable , fname : str = None ) -> Signature :","title":"from_callable"},{"location":"models/#function","text":"Holds information for functions, but not methods.","title":"Function"},{"location":"models/#fields_1","text":"Name Type name str signature Signature docstring str","title":"Fields"},{"location":"models/#from_callable_1","text":"@staticmethod def from_callable ( func ) -> Function :","title":"from_callable"},{"location":"models/#method","text":"Contains information about a method, including it's signature and properties.","title":"Method"},{"location":"models/#fields_2","text":"Name Type name str type MethodType signature Signature docstring str","title":"Fields"},{"location":"models/#from_callable_2","text":"@staticmethod def from_callable ( func , method_type : mkdocs_apidoc . models . MethodType , fname : Union [ str , NoneType ] = None ) -> Method :","title":"from_callable"},{"location":"models/#class","text":"Contains class information","title":"Class"},{"location":"models/#fields_3","text":"Name Type name str docstring str type ClassType fields typing.List[mkdocs_apidoc.models.Field] methods typing.List[mkdocs_apidoc.models.Method]","title":"Fields"},{"location":"models/#from_class","text":"@staticmethod def from_class ( cls ):","title":"from_class"},{"location":"models/#module","text":"Holds module contents","title":"Module"},{"location":"models/#fields_4","text":"Name Type name str docstring str functions typing.List[mkdocs_apidoc.models.Function] classes typing.List[mkdocs_apidoc.models.Class] enums typing.List[mkdocs_apidoc.models.Enumeration]","title":"Fields"},{"location":"models/#from_module","text":"@staticmethod def from_module ( m ) -> Module :","title":"from_module"},{"location":"render/","text":"render \u00b6 Module for automate the generation of markdown docs. Documenting individual functions, objects, and classes is supported, as well as modules. Functions \u00b6 markdown \u00b6 def markdown ( obj ): Return object's __repr_markdown__ This is useful as a function that can be passed around to get the markdown representation of various objects. Parameters \u00b6 obj An object implementing __repr_markdown__ Returns \u00b6 The result of calling __repr_markdown__ Examples \u00b6 from mkdocs_apidoc.render import markdown class A : def __repr_markdown__ ( self ): return \"# I am the **markdown** representation of A!\" print ( markdown ( A ())) # I am the **markdown** representation of A! make_converter \u00b6 def make_converter ( structure : Callable [[ Any ], ~ T ], unstructure : Callable [[ ~ T ], str ]) -> typing . Callable [[ str ], str ]: Create a conversion function The resulting function will take a string, the name of an object and structure it. Structured object will then be unstructured. The Return type of structure must match the input type of unstructure. Parameters \u00b6 structure A function which takes a python object, and structures it to a known type. unstructure A function which converts an object to a markdown representation. Returns \u00b6 A conversion function Example \u00b6 from mkdocs_apidoc.render import make_converter def parse_docstring ( s : str ) -> str : return s . __doc__ def charcount ( s : str ) -> str : return f \"Docstring is { len ( s ) } lines long, here it is ---> { s } \" converter = make_converter ( parse_docstring , charcount ) print ( converter ( \"itertools.count\" )) Docstring is 205 lines long, here it is ---> Return a count object whose .__next__() method returns consecutive values. Equivalent to: def count(firstval=0, step=1): x = firstval while 1: yield x x += step render_page \u00b6 def render_page ( page : str ) -> str : render the page Parameters \u00b6 page The page to be rendered Returns \u00b6 The rendered page Example \u00b6 from mkdocs_apidoc.render import render_page page = ''' # Hi i'm an example markdown file {{ auto_object('collections.deque') }} ## you can keep doing stuff here too Did you know the type of `collections.namedtuple` is {{ typeof('collections.namedtuple') }} ??? ''' print ( render_page ( page )) # Hi i'm an example markdown file deque([iterable[, maxlen]]) --> deque object A list-like sequence optimized for data accesses near its endpoints. ## you can keep doing stuff here too Did you know the type of `collections.namedtuple` is function ???","title":"render"},{"location":"render/#render","text":"Module for automate the generation of markdown docs. Documenting individual functions, objects, and classes is supported, as well as modules.","title":"render"},{"location":"render/#functions","text":"","title":"Functions"},{"location":"render/#markdown","text":"def markdown ( obj ): Return object's __repr_markdown__ This is useful as a function that can be passed around to get the markdown representation of various objects.","title":"markdown"},{"location":"render/#parameters","text":"obj An object implementing __repr_markdown__","title":"Parameters"},{"location":"render/#returns","text":"The result of calling __repr_markdown__","title":"Returns"},{"location":"render/#examples","text":"from mkdocs_apidoc.render import markdown class A : def __repr_markdown__ ( self ): return \"# I am the **markdown** representation of A!\" print ( markdown ( A ())) # I am the **markdown** representation of A!","title":"Examples"},{"location":"render/#make_converter","text":"def make_converter ( structure : Callable [[ Any ], ~ T ], unstructure : Callable [[ ~ T ], str ]) -> typing . Callable [[ str ], str ]: Create a conversion function The resulting function will take a string, the name of an object and structure it. Structured object will then be unstructured. The Return type of structure must match the input type of unstructure.","title":"make_converter"},{"location":"render/#parameters_1","text":"structure A function which takes a python object, and structures it to a known type. unstructure A function which converts an object to a markdown representation.","title":"Parameters"},{"location":"render/#returns_1","text":"A conversion function","title":"Returns"},{"location":"render/#example","text":"from mkdocs_apidoc.render import make_converter def parse_docstring ( s : str ) -> str : return s . __doc__ def charcount ( s : str ) -> str : return f \"Docstring is { len ( s ) } lines long, here it is ---> { s } \" converter = make_converter ( parse_docstring , charcount ) print ( converter ( \"itertools.count\" )) Docstring is 205 lines long, here it is ---> Return a count object whose .__next__() method returns consecutive values. Equivalent to: def count(firstval=0, step=1): x = firstval while 1: yield x x += step","title":"Example"},{"location":"render/#render_page","text":"def render_page ( page : str ) -> str : render the page","title":"render_page"},{"location":"render/#parameters_2","text":"page The page to be rendered","title":"Parameters"},{"location":"render/#returns_2","text":"The rendered page","title":"Returns"},{"location":"render/#example_1","text":"from mkdocs_apidoc.render import render_page page = ''' # Hi i'm an example markdown file {{ auto_object('collections.deque') }} ## you can keep doing stuff here too Did you know the type of `collections.namedtuple` is {{ typeof('collections.namedtuple') }} ??? ''' print ( render_page ( page )) # Hi i'm an example markdown file deque([iterable[, maxlen]]) --> deque object A list-like sequence optimized for data accesses near its endpoints. ## you can keep doing stuff here too Did you know the type of `collections.namedtuple` is function ???","title":"Example"}]}